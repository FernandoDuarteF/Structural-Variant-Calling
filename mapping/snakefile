conditions = glob_wildcards("../sequences/{condition}_R1.fq.gz").condition

base_path = (os.path.abspath(".."))

extensions = ["no_RG.bam", "RG.bam", "final.bam", "fixmate.bam", "sorted.bam", "collate", "coord_sort.bam"]

#container: "docker://biocontainers/bwakit:v0.7.15_cv1"

rule all:
    input:
        base_path + "/ref_seq/hg19_chr8",
        expand("bam_files/{cond}_{ext}", cond = conditions, ext = extensions),
        expand("stats/final/samtools/{cond}_stats.txt", cond = conditions),
        "stats/final/multiqc"

rule index:
    input:
        base_path + "/ref_seq/hg19_chr8.fa"
    output:
        touch(base_path + "/ref_seq/hg19_chr8")
    conda:
        base_path + "/conda/mapping_2.yaml"
    shell:
        """
        bwa index -a bwtsw {input}
        """

rule bwa:
    input:
        F = base_path + "/sequences/{cond}_R1.fq.gz",
        R = base_path + "/sequences/{cond}_R2.fq.gz",
        index = base_path + "/ref_seq/hg19_chr8.fa"
    output:
        bam = "bam_files/{cond}_no_RG.bam"
    conda:
        base_path + "/conda/mapping_2.yaml"
    #container:
        #"docker://vibsinglecellnf/bwamaptools:bwa-mem2-2.2.1-zlibng-2.0.6"
    shell:
        """
        bwa mem -t4 {input.index} {input.F} {input.R} | samtools view -S -b > {output.bam}
        """

rule preprocessing:
    input:
        bam = "bam_files/{cond}_no_RG.bam"
    output:
        bam_coord_sort = "bam_files/{cond}_coord_sort.bam",
        bam_RG = "bam_files/{cond}_RG.bam",
        collate = touch("bam_files/{cond}_collate"),
        sort = "bam_files/{cond}_sorted.bam",
        fixmate = "bam_files/{cond}_fixmate.bam",
        no_dup = "bam_files/{cond}_final.bam"
     conda:
        base_path + "/conda/mapping_2.yaml"
    shell:
        """"
        samtools sort {input.bam} -o {output.bam_coord_sort}
        samtools index {output.bam_coord_sort}
        bamaddrg -b {output.bam} -s {wildcards.cond} -r {wildcards.cond} > {output.bam_RG}
        samtools collate {output.bam_RG} {output.collate}
        samtools fixmate -r -m {output.collate}.bam {output.fixmate}
        samtools sort {output.fixmate} -o {output.sort}
        samtools markdup {output.sort} {output.no_dup}
        samtools index {output.no_dup}
        """
       

rule stats:
    input:
        bam_dup = "bam_files/{cond}_sorted.bam",
        bam_no_dup = "bam_files/{cond}_final.bam"
    output:
        pre_stats = "stats/duplicates/samtools/{cond}_stats.txt",
        stats = "stats/final/samtools/{cond}_stats.txt"
    conda:
        base_path + "/conda/mapping_2.yaml"
    shell:
        """
        samtools stats {input.bam_dup} > {output.pre_stats}
        samtools stats {input.bam_no_dup} > {output.stats}
        """

rule multiqc:
    input:
        bams_dup = expand("stats/duplicates/samtools/{cond}_stats.txt", cond = conditions),
        bams_nodup = expand("stats/final/samtools/{cond}_stats.txt", cond = conditions)
    output:
        outdir_dup = directory("stats/duplicates/multiqc"),
        outdir_nodup = directory("stats/final/multiqc")
    #params:
    #    "mapping/bam_files/*_final.bam"
    container:
        "docker://staphb/multiqc:latest"
    shell:
        """
        multiqc {input.bams_dup} -o {output.outdir_dup}
        multiqc {input.bams_nodup} -o {output.outdir_nodup}
        """